[{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://l-a-yates.github.io/cpam/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2025 Luke A. Yates  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) 2025 Luke A. Yates This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://l-a-yates.github.io/cpam/articles/cpam.html","id":"about","dir":"Articles","previous_headings":"","what":"About","title":"cpam","text":"tutorial demonstrates R package cpam analysis time series omics data. serves basic introduction package. also two detailed case studies using real world data: Arabidopsis Case Study Human embryo Case Study case studies several simulation studies presented accompanying manuscript Yates et al. (2024). See also, package website.","code":""},{"path":"https://l-a-yates.github.io/cpam/articles/cpam.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"cpam","text":"data following examples simulated based empirical RNA-seq data. data gene-level counts case-design 6 time points 5 replicates per time point. Code reproduce data available repository.","code":""},{"path":"https://l-a-yates.github.io/cpam/articles/cpam.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"cpam","text":"can install cpam using:","code":"install.packages(\"cpam\")"},{"path":[]},{"path":"https://l-a-yates.github.io/cpam/articles/cpam.html","id":"load-packages","dir":"Articles","previous_headings":"Getting started","what":"Load packages","title":"cpam","text":"","code":"library(cpam)   library(dplyr) library(tidyr) library(stringr) library(ggplot2)"},{"path":"https://l-a-yates.github.io/cpam/articles/cpam.html","id":"experimental-design","dir":"Articles","previous_headings":"Getting started","what":"Experimental design","title":"cpam","text":"example experimental design included cpam package. Since case-design, experimental conditions beyond time.","code":"# load example data load(system.file(\"extdata\", \"exp_design_example.rda\", package = \"cpam\")) exp_design_example #> # A tibble: 30 × 2 #>    sample  time #>    <chr>  <int> #>  1 X1         1 #>  2 X2         1 #>  3 X3         1 #>  4 X4         1 #>  5 X5         1 #>  6 X6         2 #>  7 X7         2 #>  8 X8         2 #>  9 X9         2 #> 10 X10        2 #> # ℹ 20 more rows"},{"path":"https://l-a-yates.github.io/cpam/articles/cpam.html","id":"count-matrix","dir":"Articles","previous_headings":"Getting started","what":"Count matrix","title":"cpam","text":"example count data provided matrix. Let’s take look first rows.","code":"# load example data load(system.file(\"extdata\", \"count_matrix_example.rda\", package = \"cpam\")) as.data.frame(count_matrix_example) %>% head  #>          X1     X2     X3     X4     X5     X6     X7     X8     X9    X10    X11    X12    X13    X14    X15    X16 #> g001 100702  93137 100748  90302  95962  79708  89726  85350  94282 121842 102158  90054 103692  78474  80961  81403 #> g002   8654   7926   8930   9196   8882   7993   8479   9865   8015   7060   9523   7124   9004   7840  10012   8161 #> g003   3258   3131   3024   3507   3687   2419   2456   2553   2238   2588   2250   2098   2166   1884   2339   1807 #> g004  24572  18575  28039  27230  25244  24315  26200  24790  26165  22652  24722  20735  27313  30438  26432  25533 #> g005 125565 118382 115517 105728 114457 120633 115978 108458 113169 115742 132714 121729  96647 134781 123007 124228 #> g006   1988   2058   2530   2135   2131   2139   2043   2068   2298   2281   2021   2097   2237   1951   1970   2175 #>         X17    X18   X19    X20    X21    X22    X23    X24    X25    X26    X27    X28    X29   X30 #> g001  76614  87686 81953 106238  87308  83021  81013  95695 109277  97975  79013  88479 119039 80521 #> g002   8789   9250  8816   7514   9565   7690   8946   7980   8919   9059   8227   7858   9253  9145 #> g003   1961   1791  1763   1893   1577   1505   1628   1511   1757   1573   1512   1659   1514  1355 #> g004  23079  27307 24375  26901  27090  28163  26881  26964  23837  24079  21432  23805  21358 29200 #> g005 126771 110148 95926 105201 100622 110298 145240 129146 114071 132796 125034 124525 115182 87204 #> g006   1990   2035  2295   2051   2159   1792   2003   2190   2140   2130   2281   2036   2241  2182"},{"path":"https://l-a-yates.github.io/cpam/articles/cpam.html","id":"fitting-cpam","dir":"Articles","previous_headings":"Getting started","what":"Fitting cpam","title":"cpam","text":"fit models, first prepare cpam object, compute p-values, estimate changepoints, select shape gene. simple example, simulated data gene-level, isoform-level counts. , leave ```transcript--gene mapping (t2g) setgene_level = T`. can look summary fitted cpam object run code computer, can launch Shiny app visualise results interactively using visualise(cpo).","code":"cpo <- prepare_cpam(exp_design = exp_design_example,                       count_matrix = count_matrix_example,                       model_type = \"case-only\",                       t2g = NULL,                       gene_level = T,                       num_cores = 1) # just for the example   cpo <- compute_p_values(cpo) # 6 seconds   cpo <- estimate_changepoint(cpo) # 4 seconds   cpo <- select_shape(cpo) # 5 seconds cpo"},{"path":"https://l-a-yates.github.io/cpam/articles/cpam.html","id":"result-tables","dir":"Articles","previous_headings":"Getting started","what":"Result tables","title":"cpam","text":"results analysis summarised using results function. generated results can filtered specifying minimum counts, minimum log-fold changes, maximum pp-values. example, return transcripts log-fold change greater 1, least 10 counts, pp-value less 0.01, can run","code":"results(cpo) #> # A tibble: 104 × 16 #>    target_id         p    cp shape lfc.1  lfc.2  lfc.3  lfc.4  lfc.5  lfc.6 counts.1 counts.2 counts.3 counts.4 counts.5 #>    <chr>         <dbl> <dbl> <chr> <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #>  1 g003      9.26e-319     1 mdcx      0 -0.349 -0.634 -0.856 -1.02  -1.11    3267.    2566.    2105.    1805.    1617.  #>  2 g013      9.26e-319     3 ilin      0  0      0      0.327  0.655  0.982  18662.   18662.   18662.   23416.   29382.  #>  3 g055      9.26e-319     1 ilin      0  0.195  0.389  0.584  0.778  0.973    608.     696.     796.     911.    1043.  #>  4 g063      9.26e-319     1 cv        0  0.595  0.937  1.03   0.861  0.443   6172.    9322.   11814.   12563.   11210.  #>  5 g069      9.26e-319     2 ilin      0  0      0.225  0.451  0.676  0.902  67904.   67904.   79391.   92821.  108524.  #>  6 g090      9.26e-319     2 ilin      0  0      0.239  0.477  0.716  0.954     32.8     32.8     38.7     45.7     53.9 #>  7 g106      9.26e-319     1 mdcx      0 -0.470 -0.778 -0.892 -0.902 -0.902  30076.   21709.   17542.   16202.   16090.  #>  8 g126      9.26e-319     1 ilin      0  0.225  0.450  0.675  0.900  1.12    4017.    4695.    5487.    6412.    7494.  #>  9 g128      9.26e-319     1 ilin      0  0.209  0.418  0.628  0.837  1.05   38099.   44043.   50915.   58859.   68043.  #> 10 g129      9.26e-319     1 cv        0  0.626  0.979  1.11   1.08   0.888    259.     399.     510.     560.     545.  #> # ℹ 94 more rows #> # ℹ 1 more variable: counts.6 <dbl> results(cpo, min_count = 10, min_lfc = 1, p_threshold = 0.01) #> # A tibble: 22 × 16 #>    target_id         p    cp shape lfc.1  lfc.2  lfc.3  lfc.4 lfc.5 lfc.6 counts.1 counts.2 counts.3 counts.4 counts.5 #>    <chr>         <dbl> <dbl> <chr> <dbl>  <dbl>  <dbl>  <dbl> <dbl> <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #>  1 g063      9.26e-319     1 cv        0  0.595  0.937  1.03  0.861 0.443   6172.    9322.   11814.   12563.   11210.  #>  2 g126      9.26e-319     1 ilin      0  0.225  0.450  0.675 0.900 1.12    4017.    4695.    5487.    6412.    7494.  #>  3 g128      9.26e-319     1 ilin      0  0.209  0.418  0.628 0.837 1.05   38099.   44043.   50915.   58859.   68043.  #>  4 g129      9.26e-319     1 cv        0  0.626  0.979  1.11  1.08  0.888    259.     399.     510.     560.     545.  #>  5 g171      9.26e-319     1 cv        0  0.593  0.922  1.01  0.901 0.616   4950.    7468.    9382.    9989.    9241.  #>  6 g186      9.26e-319     1 cx        0 -0.233 -0.324 -0.209 0.219 1.05   19740.   16792.   15774.   17077.   22974.  #>  7 g331      9.26e-319     3 ilin      0  0      0      0.339 0.678 1.02      37.0     37.0     37.0     46.8     59.1 #>  8 g334      9.26e-319     1 micv      0  0.402  0.692  0.886 1.00  1.06    2798.    3696.    4519.    5171.    5614.  #>  9 g341      9.26e-319     1 cx        0 -0.465 -0.593 -0.383 0.164 1.05   23681.   17157.   15704.   18161.   26532.  #> 10 g393      9.26e-319     1 cv        0  0.432  0.747  0.945 1.02  0.987    932.    1257.    1564.    1793.    1896.  #> # ℹ 12 more rows #> # ℹ 1 more variable: counts.6 <dbl>"},{"path":"https://l-a-yates.github.io/cpam/articles/cpam.html","id":"plotting-genes-and-transcripts","dir":"Articles","previous_headings":"Getting started","what":"Plotting genes and transcripts","title":"cpam","text":"single gene can plotted using plot_cpam function. plot gene g063 subtitle shows (1,cv) indicating changepoint first time point (.e., gene responds immediately) convex ('cv') shaped trend. Let’s look gene complex trend. Unconstrained shapes cpam denoted 'tp'.1 can filter results genes unconstrained shapes plot one . plot first gene list. selection 'tp' suggests trend gene conform one simpler shape types cpam uses. can exclude 'tp' option force cpam choose among simpler forms setting shape_type = \"shape2\" plot_cpam function (\"shape1\", default, allows 'tp'). choice can useful analysis clustering. example: monotonic increasing concave shape (‘micv’) chosen, can see trend deviates data substantially unconstrained shape. See manuscript details shape types available cpam. Next look gene changepoint filtering genes changepoints third time point. , plot first gene list.","code":"plot_cpam(cpo, gene_id = \"g063\") results(cpo) %>%    filter(shape == \"tp\") #> # A tibble: 14 × 16 #>    target_id         p    cp shape lfc.1  lfc.2  lfc.3   lfc.4  lfc.5   lfc.6 counts.1 counts.2 counts.3 counts.4 #>    <chr>         <dbl> <dbl> <chr> <dbl>  <dbl>  <dbl>   <dbl>  <dbl>   <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #>  1 g210      9.26e-319     1 tp        0  0.639  0.835  0.662   0.624  0.842    62936.   98024.  112246.   99582. #>  2 g325      9.26e-319     1 tp        0 -0.897 -0.882 -0.157   0.209 -0.0891   68092.   36565.   36941.   61074. #>  3 g335      9.26e-319     1 tp        0  0.252  0.311  0.240   0.454  0.980     1154.    1375.    1432.    1364. #>  4 g339      9.26e-319     1 tp        0 -0.756 -0.777 -0.306  -0.368 -0.914     4363.    2584.    2546.    3529. #>  5 g399      9.26e-319     1 tp        0  0.248  0.487  0.705   0.875  1.01      3916.    4652.    5487.    6384. #>  6 g400      9.26e-319     1 tp        0 -0.917 -0.674  0.558   0.706 -0.270     9731.    5155.    6097.   14330. #>  7 g417      9.26e-319     1 tp        0 -0.425 -0.574 -0.531  -0.711 -0.983     7235.    5387.    4859.    5007. #>  8 g424      9.26e-319     1 tp        0 -0.325 -0.227  0.0442 -0.204 -0.905     9559.    7632.    8170.    9857. #>  9 g640      9.26e-319     1 tp        0  0.575  0.767  0.395   0.497  0.921     1043.    1554.    1775.    1372. #> 10 g715      9.26e-319     1 tp        0  0.836  0.810 -0.239  -0.680 -0.332   157101.  280427.  275440.  133118. #> # ℹ 4 more rows #> # ℹ 2 more variables: counts.5 <dbl>, counts.6 <dbl> plot_cpam(cpo, gene_id = \"g210\") plot_cpam(cpo, gene_id = \"g210\",shape_type = \"shape2\") results(cpo) %>%    filter(cp == 3) #> # A tibble: 13 × 16 #>    target_id         p    cp shape lfc.1 lfc.2 lfc.3  lfc.4  lfc.5  lfc.6 counts.1 counts.2 counts.3 counts.4 counts.5 #>    <chr>         <dbl> <dbl> <chr> <dbl> <dbl> <dbl>  <dbl>  <dbl>  <dbl>    <dbl>    <dbl>    <dbl>    <dbl>    <dbl> #>  1 g013      9.26e-319     3 ilin      0     0     0  0.327  0.655  0.982  18662.   18662.   18662.   23416.   29382.  #>  2 g146      9.26e-319     3 dlin      0     0     0 -0.329 -0.659 -0.988    168.     168.     168.     134.     106.  #>  3 g187      9.26e-319     3 dlin      0     0     0 -0.419 -0.839 -1.26   18216.   18216.   18216.   13622.   10186.  #>  4 g297      9.26e-319     3 ilin      0     0     0  0.308  0.616  0.924   9799.    9799.    9799.   12133.   15021.  #>  5 g304      9.26e-319     3 cx        0     0     0 -1.04  -0.652  0.883   3130.    3130.    3130.    1520.    1993.  #>  6 g331      9.26e-319     3 ilin      0     0     0  0.339  0.678  1.02      37.0     37.0     37.0     46.8     59.1 #>  7 g559      9.26e-319     3 ilin      0     0     0  0.292  0.584  0.877    444.     444.     444.     543.     665.  #>  8 g623      9.26e-319     3 micv      0     0     0  0.317  0.634  0.951    329.     329.     329.     409.     510.  #>  9 g634      9.26e-319     3 cx        0     0     0 -0.880 -1.13  -0.759  12547.   12547.   12547.    6818.    5721.  #> 10 g652      9.26e-319     3 ilin      0     0     0  0.363  0.726  1.09   13016.   13016.   13016.   16739.   21528.  #> # ℹ 3 more rows #> # ℹ 1 more variable: counts.6 <dbl> plot_cpam(cpo, gene_id = \"g013\")"},{"path":"https://l-a-yates.github.io/cpam/articles/cpam.html","id":"clusters","dir":"Articles","previous_headings":"Getting started","what":"Clusters","title":"cpam","text":"results function can used generate clusters according selected filters. plot_cluster function can used visualise clusters. small simulated data set, don’t many genes cluster, can try different clustering options get idea function works. 19 genes concave shape changepoint first time point. one shape changepoint can provided. example: just four genes decreasing linear monotonic decreasing convex shapes changepoint second time point. Clustering can refined based , example, rate transcripts attain maximum values. illustrate advanced refinements case study.","code":"res <- results(cpo) plot_cluster(cpo, res, changepoints = 1, shapes = c(\"cv\")) plot_cluster(cpo, res, changepoints = 2, shapes = c(\"dlin\",\"mdcx\"))"},{"path":"https://l-a-yates.github.io/cpam/articles/cpam.html","id":"many-more-options","dir":"Articles","previous_headings":"Getting started","what":"Many more options","title":"cpam","text":"just simple example get started. package many features options. Check two case studies see cpam can used analyse real-world data: Arabidopsis Case Study Human Embryo Case Study","code":""},{"path":"https://l-a-yates.github.io/cpam/articles/cpam.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"cpam","text":"1tp stands thinplate type spline used ‘unconstrained’ curves defined mgcv package. curves still penalised smooth, shape type fixed.","code":"sessionInfo() #> R version 4.4.3 (2025-02-28) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    #>  [6] LC_MESSAGES=C.UTF-8    LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           LC_TELEPHONE=C         #> [11] LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.1   stringr_1.5.1   tidyr_1.3.1     dplyr_1.1.4     cpam_0.1.3.9000 #>  #> loaded via a namespace (and not attached): #>  [1] sass_0.4.9         utf8_1.2.4         generics_0.1.3     stringi_1.8.4      lattice_0.22-6     digest_0.6.37      #>  [7] magrittr_2.0.3     RColorBrewer_1.1-3 evaluate_1.0.3     grid_4.4.3         fastmap_1.2.0      Matrix_1.7-2       #> [13] jsonlite_1.9.1     limma_3.62.2       mgcv_1.9-1         purrr_1.0.4        scales_1.3.0       codetools_0.2-20   #> [19] textshaping_1.0.0  jquerylib_0.1.4    cli_3.6.4          rlang_1.1.5        pbmcapply_1.5.1    munsell_0.5.1      #> [25] splines_4.4.3      scam_1.2-18        withr_3.0.2        cachem_1.1.0       yaml_2.3.10        tools_4.4.3        #> [31] parallel_4.4.3     colorspace_2.1-1   locfit_1.5-9.12    vctrs_0.6.5        R6_2.6.1           matrixStats_1.5.0  #> [37] lifecycle_1.0.4    edgeR_4.4.2        fs_1.6.5           ragg_1.3.3         pkgconfig_2.0.3    desc_1.4.3         #> [43] pkgdown_2.1.1      pillar_1.10.1      bslib_0.9.0        gtable_0.3.6       Rcpp_1.0.14        glue_1.8.0         #> [49] statmod_1.5.0      systemfonts_1.2.1  xfun_0.51          tibble_3.2.1       tidyselect_1.2.1   knitr_1.49         #> [55] farver_2.1.2       htmltools_0.5.8.1  nlme_3.1-167       labeling_0.4.3     rmarkdown_2.29     compiler_4.4.3     #> [61] mvnfast_0.2.8"},{"path":[]},{"path":"https://l-a-yates.github.io/cpam/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luke Yates. Author, maintainer, copyright holder. Michael Charleston. Author. Jazmine Humphreys. Author. Steven Smith. Author.","code":""},{"path":"https://l-a-yates.github.io/cpam/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yates L, Charleston M, Humphreys J, Smith S (2025). cpam: Changepoint Additive Models Time Series Omics Data. R package version 0.1.3.9000, https://github.com/l--yates/cpam, https://l--yates.github.io/cpam/.","code":"@Manual{,   title = {cpam: Changepoint Additive Models for Time Series Omics Data},   author = {Luke Yates and Michael Charleston and Jazmine Humphreys and Steven Smith},   year = {2025},   note = {R package version 0.1.3.9000, https://github.com/l-a-yates/cpam},   url = {https://l-a-yates.github.io/cpam/}, }"},{"path":[]},{"path":"https://l-a-yates.github.io/cpam/index.html","id":"an-r-package-for-omics-time-series-analysis","dir":"","previous_headings":"cpam (changepoint additive models)","what":"An R package for omics time series analysis.","title":"Changepoint Additive Models for Time Series Omics Data","text":"Read methods paper  Application cpam RNA-seq time series Arabidopsis plants treated excess-light.","code":""},{"path":"https://l-a-yates.github.io/cpam/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key features","title":"Changepoint Additive Models for Time Series Omics Data","text":"Changepoint detection: Identify sharp transitions expression. smooth trends: Model expression smooth function time. Shape-constrained trends: Cluster targets biologically meaningful temporal shape classes. Quantification uncertainty: Account uncertainty expression estimates. Perform gene- transcript-level inferences. Aggregate pp-values gene level improved power. Case-case-control time series: Analyse time series data without controls. User-friendly: Sensible defaults interactive shiny interface. new package cpam provides comprehensive framework analysing time series omics data. method uses modern statistical approaches remaining user-friendly, sensible defaults interactive interface. Researchers can directly address key questions time series analysis—changes occur, patterns follow, responses related. focused transcriptomics, framework applicable high-dimensional time series measurements. encounter issues suggestions improvements, please open issue. welcome questions discussion using cpam research Discussions. goal work users make cpam robust valuable tool time series omics analysis. can also contacted via email addresses listed paper .","code":""},{"path":"https://l-a-yates.github.io/cpam/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Changepoint Additive Models for Time Series Omics Data","text":"package available CRAN can installed using following command:","code":"install.packages(\"cpam\")"},{"path":[]},{"path":"https://l-a-yates.github.io/cpam/index.html","id":"step-1-load-the-package","dir":"","previous_headings":"Usage","what":"Step 1: Load the package","title":"Changepoint Additive Models for Time Series Omics Data","text":"","code":"library(cpam)"},{"path":"https://l-a-yates.github.io/cpam/index.html","id":"step-2-create-a-tibble-for-the-experimental-design","dir":"","previous_headings":"Usage","what":"Step 2: Create a tibble for the experimental design.","title":"Changepoint Additive Models for Time Series Omics Data","text":"Arabidopsis thaliana time series example, used software kallisto generate counts RNA-seq data. load counts, provide file path kallisto output file (alternatively can provide counts directly count matrix, use quantification software)","code":"# load example data load(system.file(\"extdata\", \"exp_design_path.rda\", package = \"cpam\")) head(exp_design_path) #>   sample time                                path condition #> 1 JHSS01    0 output/kallisto/JHSS01/abundance.h5 treatment #> 2 JHSS02    0 output/kallisto/JHSS02/abundance.h5 treatment #> 3 JHSS03    0 output/kallisto/JHSS03/abundance.h5 treatment #> 4 JHSS04    0 output/kallisto/JHSS04/abundance.h5 treatment #> 5 JHSS05    0 output/kallisto/JHSS05/abundance.h5 treatment #> 6 JHSS06    5 output/kallisto/JHSS06/abundance.h5 treatment"},{"path":"https://l-a-yates.github.io/cpam/index.html","id":"step-3-obtain-a-table-with-the-transcript-to-gene-mapping","dir":"","previous_headings":"Usage","what":"Step 3: Obtain a table with the transcript-to-gene mapping","title":"Changepoint Additive Models for Time Series Omics Data","text":"N.B. needed counts aggregated gene level, transcript-level analysis aggregation pp-values gene level recommended. E.g., Arabidopsis thaliana:","code":"# load example data load(system.file(\"extdata\", \"t2g_arabidopsis.rda\", package = \"cpam\"))  head(t2g_arabidopsis) #>     target_id   gene_id #> 1 AT1G01010.1 AT1G01010 #> 2 AT1G01020.2 AT1G01020 #> 3 AT1G01020.6 AT1G01020 #> 4 AT1G01020.1 AT1G01020 #> 5 AT1G01020.4 AT1G01020 #> 6 AT1G01020.5 AT1G01020"},{"path":"https://l-a-yates.github.io/cpam/index.html","id":"step-4-run-cpam","dir":"","previous_headings":"Usage","what":"Step 4: Run cpam","title":"Changepoint Additive Models for Time Series Omics Data","text":"","code":"cpo <- prepare_cpam(exp_design = exp_design_path,                       count_matrix = NULL,                       t2g = t2g_arabidopsis,                       model = \"case-only\",                       import_type = \"kallisto\",                       num_cores = 5)   cpo <- compute_p_values(cpo)    cpo <- estimate_changepoint(cpo)    cpo <- select_shape(cpo)"},{"path":"https://l-a-yates.github.io/cpam/index.html","id":"step-5-visualise-the-results","dir":"","previous_headings":"Usage","what":"Step 5: Visualise the results","title":"Changepoint Additive Models for Time Series Omics Data","text":"Load shiny app interactive visualisation results: plot one gene time:  Isoform 1 (AT3G23280.1) changepoint 67.5 min monotonic increasing concave (micv) shape. Isoform 2 (AT3G23280.2) changepoint unconstrained thin-plate (tp) shape. can generate results table pp-values, shapes, log-fold changes counts many optimal filters (see tutorials):","code":"visualise(cpo) # not shown in vignette plot_cpam(cpo, gene_id = \"AT3G23280\") results(cpo) #> # A tibble: 15,279 × 25 #>    target_id   gene_id     p    cp shape lfc.0 lfc.5 lfc.10 lfc.20 lfc.30 lfc.45 #>    <chr>       <chr>   <dbl> <dbl> <chr> <dbl> <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1 AT1G01910.1 AT1G01…     0     0 micv      0 1.01   1.70   2.38   2.60   2.73  #>  2 AT1G01910.2 AT1G01…     0    10 cv        0 0      0      0.553  0.775  0.790 #>  3 AT1G01910.5 AT1G01…     0    10 cx        0 0      0     -3.20  -4.57  -4.82  #>  4 AT1G02610.1 AT1G02…     0    45 mdcx      0 0      0      0      0      0     #>  5 AT1G02610.2 AT1G02…     0    10 cx        0 0      0     -0.645 -1.16  -1.71  #>  6 AT1G02610.3 AT1G02…     0    10 mdcx      0 0      0     -1.48  -2.11  -2.25  #>  7 AT1G04080.1 AT1G04…     0    10 cv        0 0      0      2.75   3.85   3.97  #>  8 AT1G04080.2 AT1G04…     0    45 micv      0 0      0      0      0      0     #>  9 AT1G04080.3 AT1G04…     0     0 micv      0 0.268  0.445  0.603  0.638  0.656 #> 10 AT1G04080.5 AT1G04…     0    10 cx        0 0      0     -2.17  -3.04  -3.10  #> # ℹ 15,269 more rows #> # ℹ 14 more variables: lfc.60 <dbl>, lfc.90 <dbl>, lfc.180 <dbl>, #> #   lfc.240 <dbl>, counts.0 <dbl>, counts.5 <dbl>, counts.10 <dbl>, #> #   counts.20 <dbl>, counts.30 <dbl>, counts.45 <dbl>, counts.60 <dbl>, #> #   counts.90 <dbl>, counts.180 <dbl>, counts.240 <dbl>"},{"path":"https://l-a-yates.github.io/cpam/index.html","id":"tutorials","dir":"","previous_headings":"Usage","what":"Tutorials","title":"Changepoint Additive Models for Time Series Omics Data","text":"quick--run introductory example, provided small simulated data set part package. Introductory Example following two tutorials use real-world data demonstrate capabilities cpam package. addition, provide code reproduce results case studies presented manuscript accompanying cpam package. Arabidopsis Case Study Human Embryo Case Study","code":""},{"path":"https://l-a-yates.github.io/cpam/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Changepoint Additive Models for Time Series Omics Data","text":"work supported Australian Research Council, Centre Excellence Plant Success Nature Agriculture (CE200100015).","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/compute_normalization_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute normalization factors — compute_normalization_factors","title":"Compute normalization factors — compute_normalization_factors","text":"Compute normalization factors","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/compute_normalization_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute normalization factors — compute_normalization_factors","text":"","code":"compute_normalization_factors(count_matrix_filtered, normalize)"},{"path":"https://l-a-yates.github.io/cpam/reference/compute_normalization_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute normalization factors — compute_normalization_factors","text":"count_matrix_filtered Filtered count matrix normalize Whether perform normalization","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/compute_normalization_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute normalization factors — compute_normalization_factors","text":"Vector normalization factors","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/compute_p_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute p-values for each target ID — compute_p_values","title":"Compute p-values for each target ID — compute_p_values","text":"Compute p-values target ID","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/compute_p_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute p-values for each target ID — compute_p_values","text":"","code":"compute_p_values(   cpo,   subset = NULL,   p_adj_method = \"BH\",   gam_method = \"REML\",   gam_optimizer = \"efs\",   silent = TRUE )"},{"path":"https://l-a-yates.github.io/cpam/reference/compute_p_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute p-values for each target ID — compute_p_values","text":"cpo cpam object subset character vector target_id names p_adj_method method p-value adjustment gam_method fitting method mgcv::gam (default \"REML\") gam_optimizer optimization method mgcv::gam (default \"efs\") silent logical; silences warnings model fitting (default TRUE)","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/compute_p_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute p-values for each target ID — compute_p_values","text":"updated cpam object raw, adjusted, possibly aggregated p-values stored new slot \"p_table\"","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/compute_p_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute p-values for each target ID — compute_p_values","text":"function computes p-values target_id supplied cpam object. p-values computed negative binomial GAM model thin-plate spline basis function(s) time using mgcv package. p-values stored new slot p_table cpam object. aggregate_to_gene set TRUE (default), target p-values aggregated gene level using lancaster method. columns p_val_target p_val_gene store raw p-values target- gene-level, respectively. function also computes adjusted p-values using p_adj_method. default method \"BH\" (Benjamini-Hochberg), methods supported function p.adjust can used. adjusted p-values stored columns q_val_target q_val_gene.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/compute_p_values.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute p-values for each target ID — compute_p_values","text":"Wood, S.N. (2013a) p-values smooth components extended generalized additive model. Biometrika 100:221-228 doi:10.1093/biomet/ass048 Yi L, Pachter L (2018). aggregation: p-Value Aggregation Methods. R package version 1.0.1, https://CRAN.R-project.org/package=aggregation.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/compute_p_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute p-values for each target ID — compute_p_values","text":"","code":"library(cpam)  # load gene-only example cpam object load(system.file(\"extdata\", \"cpo_example.rda\", package = \"cpam\"))  # run on a small subset of the example data cpo <- compute_p_values(cpo_example, subset = paste0(\"g00\",1:9)) cpo$p_table #> # A tibble: 9 × 4 #>   target_id counts_mean p_val_target q_val_target #>   <chr>           <dbl>        <dbl>        <dbl> #> 1 g001           92078.    4.65e-  1    8.37e-  1 #> 2 g002            8589.    9.00e-  1    9.09e-  1 #> 3 g003            2147.    1   e-319    9   e-319 #> 4 g004           25248.    8.93e-  1    9.09e-  1 #> 5 g005          116963.    9.09e-  1    9.09e-  1 #> 6 g006            2122.    6.62e-  1    9.09e-  1 #> 7 g007            3337.    3.74e-  1    8.37e-  1 #> 8 g008            4646.    2.51e-  1    7.54e-  1 #> 9 g009           37448.    2.37e-  1    7.54e-  1"},{"path":"https://l-a-yates.github.io/cpam/reference/convert_to_long_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert count matrix to long format and join with experiment design — convert_to_long_format","title":"Convert count matrix to long format and join with experiment design — convert_to_long_format","text":"Convert count matrix long format join experiment design","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/convert_to_long_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert count matrix to long format and join with experiment design — convert_to_long_format","text":"","code":"convert_to_long_format(counts_raw, exp_design)"},{"path":"https://l-a-yates.github.io/cpam/reference/convert_to_long_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert count matrix to long format and join with experiment design — convert_to_long_format","text":"counts_raw Raw count matrix exp_design Experimental design","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/convert_to_long_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert count matrix to long format and join with experiment design — convert_to_long_format","text":"Long format data frame","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/cpam-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The cpam class — cpam-class","title":"The cpam class — cpam-class","text":"cpam class stores data analysis results time series omics experiment. object generated prepare_cpam function contains necessary data parameters downstream analysis.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/cpam-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The cpam class — cpam-class","text":"cpam object list following components: exp_design data frame containing experimental design information, columns 'sample', 'time', potentially variables. count_matrix_raw original count matrix filtering. count_matrix_filtered count matrix filtering low-count genes/transcripts. target_to_keep vector transcript/gene IDs passed filtering criteria. data_long long-format data frame containing relevant information target sample. t2g transcript--gene mapping data frame provided. regularize Logical; whether empirical Bayes regularization dispersions used. overdispersion.prior Median overdispersion. model_type String; type design used, either \"case-\" \"case-control\". condition_var String; column name exp_design condition variable (case-control models). case_value value condition_var indicates \"case\" case-control models. bootstrap Logical; whether bootstrap samples (inferential replicates) used. nboot number bootstrap samples used, applicable. filter list containing filtering function arguments used. gene_level Logical; whether analysis performed gene level. aggregate_to_gene Logical; whether p-values aggregated transcript gene level. times ordered vector unique time points experimental design. num_cores number cores used parallel computation. fixed_effects formula fixed effects model. intercept_cc String; intercept type case-control models. bss vector basis function types used modelling.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/cpam-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"The cpam class — cpam-class","text":"Objects class cpam print summary methods available.","code":""},{"path":[]},{"path":"https://l-a-yates.github.io/cpam/reference/cpam-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The cpam class — cpam-class","text":"","code":"# load gene-only example data load(system.file(\"extdata\", \"exp_design_example.rda\", package = \"cpam\")) load(system.file(\"extdata\", \"count_matrix_example.rda\", package = \"cpam\"))  # Create a cpam object with the example data cpo <- prepare_cpam(exp_design = exp_design_example,                     count_matrix = count_matrix_example,                     gene_level = TRUE) #> ℹ Processing count matrix #> ✔ Processing count matrix [28ms] #>  #> ℹ Filtering low count genes #> ℹ Estimating dispersions using edgeR #> ✔ Estimating dispersions using edgeR [478ms] #>  #> ℹ Filtering low count genes #> ✔ Filtering low count genes [653ms] #>   # Print the object structure cpo #>  #> ── cpam object ───────────────────────────────────────────────────────────────── #> • case-only time series #> • 30 samples #> • 6 time points #> • Counts aggregated for gene-level inference  # Get a summary of the cpam object summary(cpo) #>  #> ── cpam object ───────────────────────────────────────────────────────────────── #> • case-only time series #> • 30 samples #> • 6 time points #> • Counts aggregated for gene-level inference #>  #> → use `compute_p_values()()` to compute p-values #> → use `estimate_changepoints()()` to estimate changepoints #> → use `select_shape()()` to select among candidate shapes"},{"path":"https://l-a-yates.github.io/cpam/reference/cpam-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cpam: Changepoint Additive Models for Time Series Omics Data — cpam-package","title":"cpam: Changepoint Additive Models for Time Series Omics Data — cpam-package","text":"Provides comprehensive framework time series omics analysis, integrating changepoint detection, smooth shape-constrained trends, uncertainty quantification. supports gene- transcript-level inferences, p-value aggregation improved power, case-case-control designs. includes interactive 'shiny' interface. methods described Yates et al. (2024) doi:10.1101/2024.12.22.630003 .","code":""},{"path":[]},{"path":"https://l-a-yates.github.io/cpam/reference/cpam-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cpam: Changepoint Additive Models for Time Series Omics Data — cpam-package","text":"Maintainer: Luke Yates luke.yates@utas.edu.au (ORCID) [copyright holder] Authors: Michael Charleston Jazmine Humphreys Steven Smith","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/estimate_changepoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Use model selection to estimate changepoints — estimate_changepoint","title":"Use model selection to estimate changepoints — estimate_changepoint","text":"Use model selection estimate changepoints","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/estimate_changepoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use model selection to estimate changepoints — estimate_changepoint","text":"","code":"estimate_changepoint(   cpo,   cps = NULL,   degs_only = TRUE,   deg_threshold = 0.05,   subset = NULL,   sp = NULL,   bss = \"tp\",   family = c(\"nb\", \"gaussian\"),   score = \"aic\",   compute_mvn = TRUE )"},{"path":"https://l-a-yates.github.io/cpam/reference/estimate_changepoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use model selection to estimate changepoints — estimate_changepoint","text":"cpo cpam object cps vector candidate changepoints. Defaults set observed timepoints degs_only logical; changepoints estimated differentially expressed genes deg_threshold logical; threshold value DEGs (ignored degs_only = F) subset character vector; names targets genes (cpo$gene_level = T) changepoints estimated sp numerical >= 0; supply fixed smoothing parameter. can decrease fitting time recommended changepoints estimation sensitive smoothness. bss character vector; names candidate spline bases (.e., candidate shape types). Default thin plate (\"tp\") splines. family character; negative binomial (\"nb\", default) Gaussian (\"gaussian\", currently supported) score character; model selection score, either Generalised Cross Validation (\"gcv\") Akaike Information Criterion (\"aic\") compute_mvn Use simulation compute p-value multivariate normal model model scores","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/estimate_changepoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use model selection to estimate changepoints — estimate_changepoint","text":"cpam object estimated changepoint table added slot \"changepoints\"","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/estimate_changepoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use model selection to estimate changepoints — estimate_changepoint","text":"function estimates changepoints target_id. assumed trajectory type modelling stage initially constant followed changepoint thin-plate smoothing spline. default, candidate time points limited discrete observed values series, since, despite use smoothing constraints, generally insufficient information infer timing changepoints beyond temporal resolution data. case, candidate points can set manually using cps argument. estimate changepoints, model fit candidate changepoint generalised cross-validation (GCV, default) Akaike Information Criterion (AIC) used select among . Model-selection uncertainty dealt computing one-standard-error rule, identifies least complex model within one standard error best scoring model. minimum one-standard-error (default) models stored returned slot \"changepoints\" either can used. addition , function also computes probability (denoted p_mvn) null model best scoring model, using simulation based approach based multivariate normal model pointwise model scores. Given computational cost fitting separate model candidate changepoint, cpam estimates changepoints targets associated 'significant' genes chosen threshold deg_threshold.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/estimate_changepoint.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Use model selection to estimate changepoints — estimate_changepoint","text":"Yates, L. ., S. . Richards, B. W. Brook. 2021. Parsimonious model selection using information theory: modified selection rule. Ecology 102(10):e03475. 10.1002/ecy.3475","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/estimate_changepoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use model selection to estimate changepoints — estimate_changepoint","text":"","code":"library(cpam) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # load example data load(system.file(\"extdata\", \"exp_design_example.rda\", package = \"cpam\")) load(system.file(\"extdata\", \"count_matrix_example.rda\", package = \"cpam\"))  cpo <- prepare_cpam(exp_design = exp_design_example,                     count_matrix = count_matrix_example[1:20,],                     gene_level = TRUE,                     num_cores = 1) #> ℹ Processing count matrix #> ✔ Processing count matrix [16ms] #>  #> ℹ Filtering low count genes #> ℹ Estimating dispersions using edgeR #> ✔ Estimating dispersions using edgeR [68ms] #>  #> ℹ Filtering low count genes #> ✔ Filtering low count genes [100ms] #>  cpo <- compute_p_values(cpo) cpo <- estimate_changepoint(cpo) #> Estimating changepoints for 3 targets #> Candidate changepoints are t = 1, 2, 3, 4, 5, and 6 cpo$changepoints #> # A tibble: 3 × 7 #>   target_id cp_min cp_1se  p_mvn bs    family score_table       #>   <chr>      <dbl>  <dbl>  <dbl> <chr> <chr>  <list>            #> 1 g003           1      1 0      tp    nb     <tibble [30 × 6]> #> 2 g013           3      3 0      tp    nb     <tibble [30 × 6]> #> 3 g014           1      5 0.0769 tp    nb     <tibble [30 × 6]>"},{"path":"https://l-a-yates.github.io/cpam/reference/estimate_dispersions_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for estimating dispersions — estimate_dispersions_wrapper","title":"Wrapper for estimating dispersions — estimate_dispersions_wrapper","text":"Wrapper estimating dispersions","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/estimate_dispersions_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for estimating dispersions — estimate_dispersions_wrapper","text":"","code":"estimate_dispersions_wrapper(   count_matrix_filtered,   exp_design,   bootstrap,   catch )"},{"path":"https://l-a-yates.github.io/cpam/reference/estimate_dispersions_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for estimating dispersions — estimate_dispersions_wrapper","text":"count_matrix_filtered Filtered count matrix exp_design Experimental design bootstrap Whether bootstrap used catch Overdispersion calculations bootstrap","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/estimate_dispersions_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for estimating dispersions — estimate_dispersions_wrapper","text":"Estimated dispersions","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/handle_gene_aggregation.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle gene aggregation in long format data — handle_gene_aggregation","title":"Handle gene aggregation in long format data — handle_gene_aggregation","text":"Handle gene aggregation long format data","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/handle_gene_aggregation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle gene aggregation in long format data — handle_gene_aggregation","text":"","code":"handle_gene_aggregation(data_long, t2g, aggregate_to_gene)"},{"path":"https://l-a-yates.github.io/cpam/reference/handle_gene_aggregation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle gene aggregation in long format data — handle_gene_aggregation","text":"data_long Long format data t2g Transcript gene mapping aggregate_to_gene Whether aggregate gene level","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/handle_gene_aggregation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle gene aggregation in long format data — handle_gene_aggregation","text":"Updated long format data gene ID information","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/import_count_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Import count data from files — import_count_data","title":"Import count data from files — import_count_data","text":"Import count data files","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/import_count_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import count data from files — import_count_data","text":"","code":"import_count_data(exp_design, t2g, import_type, gene_level, bootstrap)"},{"path":"https://l-a-yates.github.io/cpam/reference/import_count_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import count data from files — import_count_data","text":"exp_design Experimental design t2g Transcript gene mapping import_type Import type gene_level Whether aggregate gene level bootstrap Whether use bootstrap samples","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/import_count_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import count data from files — import_count_data","text":"List containing imported data related variables","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/ose_rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply the one-standard-error rule for model selection — ose_rule","title":"Apply the one-standard-error rule for model selection — ose_rule","text":"Apply one-standard-error rule model selection","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/ose_rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply the one-standard-error rule for model selection — ose_rule","text":"","code":"ose_rule(tab, nse = 1)"},{"path":"https://l-a-yates.github.io/cpam/reference/ose_rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply the one-standard-error rule for model selection — ose_rule","text":"tab table containing model scores nse Number standard errors use (default: 1)","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/ose_rule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply the one-standard-error rule for model selection — ose_rule","text":"selected model parsimonious within nse standard errors best model","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/ose_rule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply the one-standard-error rule for model selection — ose_rule","text":"Implements one-standard-error rule selects parsimonious model within specified number standard errors best-scoring model.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://l-a-yates.github.io/cpam/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/plot_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot clustered targets — plot_cluster","title":"Plot clustered targets — plot_cluster","text":"Plot clustered targets","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/plot_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot clustered targets — plot_cluster","text":"","code":"plot_cluster(cpo, res, changepoints, shapes, alpha = 0.1)"},{"path":"https://l-a-yates.github.io/cpam/reference/plot_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot clustered targets — plot_cluster","text":"cpo cpam object res tibble, output results() containing columns target_id, cp, shape changepoints numerical character; one changepoints (ones used estimate_changepoint() shapes character; one shapes (ones used select_shape() alpha numeric 0 1; controls line transparency plot (default: 0.1)","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/plot_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot clustered targets — plot_cluster","text":"ggplot object showing overlaid fitted trends, NULL matching targets found","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/plot_cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot clustered targets — plot_cluster","text":"Plots fitted trends set targets whose estimated changepoints shapes given arguments changepoints shapes, respectively. Creates combined plot showing fitted expression trends targets share specified changepoint times shape patterns. line represents one target's fitted trajectory, transparency controlled alpha.","code":""},{"path":[]},{"path":"https://l-a-yates.github.io/cpam/reference/plot_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot clustered targets — plot_cluster","text":"","code":"library(cpam)  # load gene-only example cpam object load(system.file(\"extdata\", \"cpo_example.rda\", package = \"cpam\"))  # Generate results table res_example <- results(cpo_example)  # plot all targets with changepoint at timepoint 0 and shape \"ilin\" (increasing linear) plot_cluster(cpo_example, res_example, changepoints = 2, shapes = \"ilin\") #> Plotting 4 targets"},{"path":"https://l-a-yates.github.io/cpam/reference/plot_cpam.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot fitted changepoint additive models — plot_cpam","title":"Plot fitted changepoint additive models — plot_cpam","text":"Plot fitted changepoint additive models","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/plot_cpam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot fitted changepoint additive models — plot_cpam","text":"","code":"plot_cpam(   cpo,   gene_id = NULL,   target_id = NULL,   cp_type = c(\"cp_1se\", \"cp_min\"),   shape_type = \"shape1\",   bs = \"auto\",   cp_fix = -1,   facet = FALSE,   sp = NULL,   show_fit = TRUE,   show_data = TRUE,   show_fit_ci = TRUE,   show_data_ci = TRUE,   ci_prob = \"se\",   remove_null = FALSE,   null_threshold = 0.05,   null_threshold_adj = TRUE,   k_mult = 1.2,   return_fits_only = FALSE,   family = \"nb\",   common_y_scale = TRUE,   scaled = FALSE,   base_size = 12 )"},{"path":"https://l-a-yates.github.io/cpam/reference/plot_cpam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot fitted changepoint additive models — plot_cpam","text":"cpo cpam object containing count data, model fits, optional changepoint/shape estimates gene_id character; gene_id (mutually exclusive target_id) target_id character; target_id (mutually exclusive gene_id) cp_type One \"cp_1se\" \"cp_min\"; rule selecting changepoint fitted models. See estimate_changepoint() details. shape_type One \"shape1\" \"shape2\"; set fitted shape patterns use. See select_shape() details. bs Shape pattern fit (\"null\", \"lin\", \"ilin\", \"dlin\", cpo$bss). Use \"auto\" (default) use estimated shapes per shape_type. cp_fix Numeric; fixed changepoint time. Set -1 (default) use estimated changepoints facet Logical; multiple transcripts, plot separate facets? sp numerical; set smooth parameter. NULL (default) automatic selection show_fit logical; show fitted trend? show_data logical; show (possibly normalized scaled) data points? show_fit_ci logical; show credible interval fitted trend? show_data_ci logical; show bootstrapped quantile data points? ci_prob \"se\" standard error bands (see mgcv::predict.gam()), numeric simulation-based intervals. numerical, sets probability simulation-based estimates credible interval. remove_null logical; plot differentially expressed transcripts (applicable gene-analyses) null_threshold numeric; P value threshold filtering NULL transcripts null_threshold_adj logical; use adjusted (default) non-adjusted p-values filtering targets k_mult numerical; multiplier number knots spline. recommended change value. return_fits_only logical; return model fits. plot function family character; negative binomial (\"nb\", default) Gaussian (\"gaussian\") common_y_scale logical; faceted plots multiple transcripts, scale y-axis common free. scaled logical; scaled data overdispersions (bootstrapped data ) base_size numeric; base font size plot","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/plot_cpam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot fitted changepoint additive models — plot_cpam","text":"ggplot object","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/plot_cpam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot fitted changepoint additive models — plot_cpam","text":"Plots fitted trend data points given gene target. gene ID supplied, function plot transcripts gene. function can also used return model fit(s) , gamObject objects mgcv package.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/plot_cpam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot fitted changepoint additive models — plot_cpam","text":"","code":"library(cpam)  # load gene-only example cpam object load(system.file(\"extdata\", \"cpo_example.rda\", package = \"cpam\"))  # example gene plot_cpam(cpo_example, gene_id = \"g003\")   # gene with estimated changepoint at timepoint 3 plot_cpam(cpo_example, gene_id = \"g013\")   # manually set the changepoint plot_cpam(cpo_example, gene_id = \"g013\", cp_fix = 2)"},{"path":"https://l-a-yates.github.io/cpam/reference/prepare_cpam.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a cpam object — prepare_cpam","title":"Prepare a cpam object — prepare_cpam","text":"Prepare cpam object","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/prepare_cpam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a cpam object — prepare_cpam","text":"","code":"prepare_cpam(   exp_design,   count_matrix = NULL,   t2g = NULL,   import_type = NULL,   model_type = c(\"case-only\", \"case-control\"),   bootstrap = TRUE,   filter_fun = \"ts_filter\",   filter_fun_args = list(min_reads = 5, min_prop = 3/5),   regularize = TRUE,   gene_level = FALSE,   aggregate_to_gene = !gene_level,   condition_var = \"condition\",   case_value = \"treatment\",   num_cores = 1,   normalize = TRUE,   fixed_effects = NULL,   intercept_cc = c(\"1\", condition_var) )"},{"path":"https://l-a-yates.github.io/cpam/reference/prepare_cpam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a cpam object — prepare_cpam","text":"exp_design dataframe tibble experimental design, containing least 'time' 'sample' column count_matrix matrix counts. Column names must 'sample' column exp_design, t2g transcript gene dataframe tibble columns target_id gene_id import_type software used quantification, one \"kallisto\", \"salmon\" ,.... Ignored count_matrix supplied. model_type \"case-\" (default) \"case-control\" bootstrap logical; load bootstrap samples, also called inferential replicates, available, rescale counts. filter_fun filter function remove lowly expressed genes (default filter_fun()) filter_fun_args arguments filter function regularize logical; use empirical Bayes regularization dispersions (default TRUE) gene_level logical; aggregate counts gene level data preparation modelling (default FALSE) aggregate_to_gene logical; aggregate p values transcript- gene-level condition_var string; column name exp_design condition variable (model_type = \"case_control\" ) case_value value condition_var indicates \"case\". values deemed control num_cores integer; number cores use parallel computation normalize logical; use model offsets based sampling depth gene length fixed_effects model formula form ~ effect1 + effect2 intercept_cc string; intercept case-control model: \"1\" (default) common intercept  \"condition\"","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/prepare_cpam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a cpam object — prepare_cpam","text":"object class cpam-class. returned object methods print summary displaying information. See cpam-class details structure returned object.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/prepare_cpam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare a cpam object — prepare_cpam","text":"function prepares cpam object analysis. function loads count data files matrix, filters lowly expressed genes, computes normalisation factors, estimates dispersions. Many steps can customised turned . bootstrap samples (inferential replicates) available, loads summarises using means, standard errors, estimated overdispersions. latter measure quantification uncertainty used rescale counts accounts uncertainty modelling steps.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/prepare_cpam.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prepare a cpam object — prepare_cpam","text":"Pedro L Baldoni, Yunshun Chen, Soroor Hediyeh-zadeh, Yang Liao, Xueyi Dong, Matthew E Ritchie, Wei Shi, Gordon K Smyth, Dividing quantification uncertainty allows efficient assessment differential transcript expression edgeR, Nucleic Acids Research, Volume 52, Issue 3, 9 February 2024, Page e13, https://doi.org/10.1093/nar/gkad1167 Yunshun Chen, Lizhong Chen, Aaron T L Lun, Pedro L Baldoni, Gordon K Smyth, edgeR v4: powerful differential analysis sequencing data expanded functionality improved support small counts larger datasets, Nucleic Acids Research, Volume 53, Issue 2, 27 January 2025, https://doi.org/10.1093/nar/gkaf018","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/prepare_cpam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a cpam object — prepare_cpam","text":"","code":"library(cpam)  # load gene-only example data load(system.file(\"extdata\", \"exp_design_example.rda\", package = \"cpam\")) load(system.file(\"extdata\", \"count_matrix_example.rda\", package = \"cpam\"))  cpo <- prepare_cpam(exp_design = exp_design_example,                     count_matrix = count_matrix_example,                     gene_level = TRUE) #> ℹ Processing count matrix #> ✔ Processing count matrix [18ms] #>  #> ℹ Filtering low count genes #> ℹ Estimating dispersions using edgeR #> ✔ Estimating dispersions using edgeR [321ms] #>  #> ℹ Filtering low count genes #> ✔ Filtering low count genes [469ms] #>  cpo #>  #> ── cpam object ───────────────────────────────────────────────────────────────── #> • case-only time series #> • 30 samples #> • 6 time points #> • Counts aggregated for gene-level inference"},{"path":"https://l-a-yates.github.io/cpam/reference/process_bootstrap_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process bootstrap data — process_bootstrap_data","title":"Process bootstrap data — process_bootstrap_data","text":"Process bootstrap data","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/process_bootstrap_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process bootstrap data — process_bootstrap_data","text":"","code":"process_bootstrap_data(data_long, catch, boot)"},{"path":"https://l-a-yates.github.io/cpam/reference/process_bootstrap_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process bootstrap data — process_bootstrap_data","text":"data_long Long format data catch Overdispersion calculations boot Bootstrap summary","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/process_bootstrap_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process bootstrap data — process_bootstrap_data","text":"Updated data bootstrap information","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/process_count_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Process count matrix when importing is not needed — process_count_matrix","title":"Process count matrix when importing is not needed — process_count_matrix","text":"Process count matrix importing needed","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/process_count_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process count matrix when importing is not needed — process_count_matrix","text":"","code":"process_count_matrix(count_matrix, t2g, gene_level)"},{"path":"https://l-a-yates.github.io/cpam/reference/process_count_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process count matrix when importing is not needed — process_count_matrix","text":"count_matrix Count matrix t2g Transcript gene mapping gene_level Whether aggregate gene level","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/process_count_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process count matrix when importing is not needed — process_count_matrix","text":"Processed count matrix","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/results.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a results table from a cpam object — results","title":"Create a results table from a cpam object — results","text":"Create results table cpam object","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a results table from a cpam object — results","text":"","code":"results(   cpo,   p_threshold = 0.05,   p_type = c(\"p_gam\", \"p_mvn\"),   min_lfc = 0,   min_count = 0,   aggregate_to_gene = cpo$aggregate_to_gene,   add_lfc = TRUE,   add_counts = TRUE,   cp_type = c(\"cp_1se\", \"cp_min\"),   shape_type = c(\"shape1\", \"shape2\"),   summarise_to_gene = FALSE,   remove_null_targets = TRUE )"},{"path":"https://l-a-yates.github.io/cpam/reference/results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a results table from a cpam object — results","text":"cpo cpam object p_threshold numerical; threshold adjusted p-values; default 0.05 p_type character; choose type p-value. Options \"p_gam\" (default) \"p_mvn\" (see compute_p_values() details). min_lfc numerical; maximum absolute log (base 2) fold change must exceed minimum value; default 0 min_count numerical; maximum modelled counts evaluated set observed time points must exceed minimum value aggregate_to_gene logical; filter gene-aggregated p-values add_lfc logical; add log (base 2) fold changes time point add_counts logical; add modelled counts time point cp_type character; model-selection rule used select changepoint shape_type character; \"shape1\" include unconstrained otherwise \"shape2\" summarise_to_gene logical; return gene-level results remove_null_targets logical; remove targets null shapes (default T). F, targets null shapes included aggregated p-value corresponding gene passes specified filtering thresholds.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a results table from a cpam object — results","text":"tibble","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a results table from a cpam object — results","text":"function usually called compute_p_values(), estimate_changepoint, select_shape run. function several useful filters adjusted p-value thresholds, minimum log-fold changes, minimum counts.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a results table from a cpam object — results","text":"","code":"library(cpam)  # load gene-only example cpam object load(system.file(\"extdata\", \"cpo_example.rda\", package = \"cpam\"))  results(cpo_example) #> # A tibble: 104 × 16 #>    target_id         p    cp shape lfc.1  lfc.2  lfc.3  lfc.4  lfc.5  lfc.6 #>    <chr>         <dbl> <dbl> <chr> <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1 g003      9.26e-319     1 mdcx      0 -0.349 -0.634 -0.856 -1.02  -1.11  #>  2 g013      9.26e-319     3 ilin      0  0      0      0.327  0.655  0.982 #>  3 g055      9.26e-319     1 ilin      0  0.195  0.389  0.584  0.778  0.973 #>  4 g063      9.26e-319     1 cv        0  0.595  0.937  1.03   0.861  0.443 #>  5 g069      9.26e-319     2 ilin      0  0      0.225  0.451  0.676  0.902 #>  6 g090      9.26e-319     2 ilin      0  0      0.239  0.477  0.716  0.954 #>  7 g106      9.26e-319     1 mdcx      0 -0.470 -0.778 -0.892 -0.902 -0.902 #>  8 g126      9.26e-319     1 ilin      0  0.225  0.450  0.675  0.900  1.12  #>  9 g128      9.26e-319     1 ilin      0  0.209  0.418  0.628  0.837  1.05  #> 10 g129      9.26e-319     1 cv        0  0.626  0.979  1.11   1.08   0.888 #> # ℹ 94 more rows #> # ℹ 6 more variables: counts.1 <dbl>, counts.2 <dbl>, counts.3 <dbl>, #> #   counts.4 <dbl>, counts.5 <dbl>, counts.6 <dbl>  # Add filters results(cpo_example, p_threshold = 0.01, min_lfc = 1) #> # A tibble: 22 × 16 #>    target_id         p    cp shape lfc.1  lfc.2  lfc.3  lfc.4 lfc.5 lfc.6 #>    <chr>         <dbl> <dbl> <chr> <dbl>  <dbl>  <dbl>  <dbl> <dbl> <dbl> #>  1 g063      9.26e-319     1 cv        0  0.595  0.937  1.03  0.861 0.443 #>  2 g126      9.26e-319     1 ilin      0  0.225  0.450  0.675 0.900 1.12  #>  3 g128      9.26e-319     1 ilin      0  0.209  0.418  0.628 0.837 1.05  #>  4 g129      9.26e-319     1 cv        0  0.626  0.979  1.11  1.08  0.888 #>  5 g171      9.26e-319     1 cv        0  0.593  0.922  1.01  0.901 0.616 #>  6 g186      9.26e-319     1 cx        0 -0.233 -0.324 -0.209 0.219 1.05  #>  7 g331      9.26e-319     3 ilin      0  0      0      0.339 0.678 1.02  #>  8 g334      9.26e-319     1 micv      0  0.402  0.692  0.886 1.00  1.06  #>  9 g341      9.26e-319     1 cx        0 -0.465 -0.593 -0.383 0.164 1.05  #> 10 g393      9.26e-319     1 cv        0  0.432  0.747  0.945 1.02  0.987 #> # ℹ 12 more rows #> # ℹ 6 more variables: counts.1 <dbl>, counts.2 <dbl>, counts.3 <dbl>, #> #   counts.4 <dbl>, counts.5 <dbl>, counts.6 <dbl>"},{"path":"https://l-a-yates.github.io/cpam/reference/select_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Use model selection to select a shape for each target — select_shape","title":"Use model selection to select a shape for each target — select_shape","text":"Use model selection select shape target","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/select_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use model selection to select a shape for each target — select_shape","text":"","code":"select_shape(   cpo,   subset = NULL,   sp = NULL,   bss = c(\"micv\", \"mdcx\", \"cv\", \"cx\", \"lin\", \"tp\", \"null\"),   family = c(\"nb\", \"gaussian\"),   score = \"gcv\",   cp_type = c(\"cp_1se\", \"cp_min\") )"},{"path":"https://l-a-yates.github.io/cpam/reference/select_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use model selection to select a shape for each target — select_shape","text":"cpo cpam object subset character vector; names targets genes (cpo$gene_level = T) changepoints estimated sp numerical >= 0; supply fixed smoothing parameter. NULL (default), smoothing parameter estimated. Note, fixed value case applied shape constrained bases (.e., bs = 'tp'). bss character vector; names candidate spline bases (.e., candidate shape types). family character; negative binomial (\"nb\", default) Gaussian (\"gaussian\") score character; model selection score, either Generalised Cross Validation (\"gcv\") Akaike Information Criterion (\"aic\") cp_type character; changepoints estimated using estimate_changepoint(), selection rule used. See estimate_changepoint() details.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/select_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use model selection to select a shape for each target — select_shape","text":"cpam object selected shapes added slot \"shapes\"","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/select_shape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use model selection to select a shape for each target — select_shape","text":"function selects best shape list candidate shapes target. typically last step analysis, called p-values estimated using compute_p_values() changepoints estimated using estimate_changepoint(). Two shape selections generated. first selecting among linear, convex concave shape classes monotonic variants (shape set given bss), second selecting among first options plus 'unconstrained' smooth. inclusion 'unconstrained' type provides flexibility detect targets beyond simpler trends. computational reasons, per changepoint estimation, shapes selected genes, isoforms, identified significant chosen FDR threshold. overridden providing subset target names subset argument, provided targets estimated changepoints.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/select_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use model selection to select a shape for each target — select_shape","text":"","code":"library(cpam)  # load example data load(system.file(\"extdata\", \"exp_design_example.rda\", package = \"cpam\")) load(system.file(\"extdata\", \"count_matrix_example.rda\", package = \"cpam\"))  # Using a small subset of the example data cpo <- prepare_cpam(exp_design = exp_design_example,                     count_matrix = count_matrix_example[1:20,],                     gene_level = TRUE,                     num_cores = 1) #> ℹ Processing count matrix #> ✔ Processing count matrix [18ms] #>  #> ℹ Filtering low count genes #> ℹ Estimating dispersions using edgeR #> ✔ Estimating dispersions using edgeR [44ms] #>  #> ℹ Filtering low count genes #> ✔ Filtering low count genes [82ms] #>  cpo <- compute_p_values(cpo) cpo <- estimate_changepoint(cpo) #> Estimating changepoints for 3 targets #> Candidate changepoints are t = 1, 2, 3, 4, 5, and 6 cpo <- select_shape(cpo) #> Estimating shapes for 3 targets #> Candidate changepoints are bs = \"micv\", \"mdcx\", \"cv\", \"cx\", \"lin\", \"tp\", and #> \"null\" cpo$shapes #> # A tibble: 3 × 4 #>   target_id    cp shape1 shape2 #>   <chr>     <dbl> <chr>  <chr>  #> 1 g003          1 mdcx   mdcx   #> 2 g013          3 ilin   ilin   #> 3 g014          5 null   null"},{"path":"https://l-a-yates.github.io/cpam/reference/simulate_p_mvn.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate p-values using multivariate normal distribution — simulate_p_mvn","title":"Simulate p-values using multivariate normal distribution — simulate_p_mvn","text":"Simulate p-values using multivariate normal distribution","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/simulate_p_mvn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate p-values using multivariate normal distribution — simulate_p_mvn","text":"","code":"simulate_p_mvn(score_table, nsim = 10000, reg = 0.001)"},{"path":"https://l-a-yates.github.io/cpam/reference/simulate_p_mvn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate p-values using multivariate normal distribution — simulate_p_mvn","text":"score_table Table model scores nsim Number simulations (default: 1e4) reg Regularization parameter covariance matrix (default: 1e-3)","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/simulate_p_mvn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate p-values using multivariate normal distribution — simulate_p_mvn","text":"Probability null model best scoring model","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/simulate_p_mvn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate p-values using multivariate normal distribution — simulate_p_mvn","text":"Uses Monte Carlo simulation compute probability null model best scoring model multivariate normal assumptions.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/summarise_bootstraps.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize bootstrap samples — summarise_bootstraps","title":"Summarize bootstrap samples — summarise_bootstraps","text":"Internal function process inferential replicates tximport objects.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/summarise_bootstraps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize bootstrap samples — summarise_bootstraps","text":"","code":"summarise_bootstraps(txi)"},{"path":"https://l-a-yates.github.io/cpam/reference/summarise_bootstraps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize bootstrap samples — summarise_bootstraps","text":"txi tximport object containing inferential replicates","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/summarise_bootstraps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize bootstrap samples — summarise_bootstraps","text":"tibble bootstrap summary statistics","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/ts_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes lowly expressed genes — ts_filter","title":"Removes lowly expressed genes — ts_filter","text":"Removes lowly expressed genes","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/ts_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes lowly expressed genes — ts_filter","text":"","code":"ts_filter(data, min_reads = 5, min_prop = 3/5)"},{"path":"https://l-a-yates.github.io/cpam/reference/ts_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes lowly expressed genes — ts_filter","text":"data tibble data.frame containing columns: target_id (character): Transcript identifiers time (numeric): Time point measurement counts (numeric): Read counts min_reads minimum reads per transcript per sample min_prop minimum proportion samples exceed min_read given time point (default: 3/5)","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/ts_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes lowly expressed genes — ts_filter","text":"character vector transcript IDs keep","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/ts_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Removes lowly expressed genes — ts_filter","text":"Identifies targets show strong consistent expression least one timepoint. timepoint, function calculates proportion samples targets exceeds min_reads. Targets retained meet minimum proportion (min_prop) timepoint experiment.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/ts_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes lowly expressed genes — ts_filter","text":"","code":"data <- dplyr::tibble(   target_id = rep(paste0(\"t\", 1:3), each = 6),   time = rep(c(0, 4, 8), 6),   counts = c(6,6,6, 0,0,0, 6,0,6, 0,6,6, 6,6,6, 6,0,0) ) ts_filter(data) #> [1] \"t2\" \"t3\""},{"path":"https://l-a-yates.github.io/cpam/reference/validate_cores.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate and adjust number of cores — validate_cores","title":"Validate and adjust number of cores — validate_cores","text":"Validate adjust number cores","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/validate_cores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate and adjust number of cores — validate_cores","text":"","code":"validate_cores(num_cores)"},{"path":"https://l-a-yates.github.io/cpam/reference/validate_cores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate and adjust number of cores — validate_cores","text":"num_cores Number cores requested","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/validate_cores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate and adjust number of cores — validate_cores","text":"Validated number cores","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/validate_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate input parameters for prepare_cpam — validate_inputs","title":"Validate input parameters for prepare_cpam — validate_inputs","text":"Validate input parameters prepare_cpam","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/validate_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate input parameters for prepare_cpam — validate_inputs","text":"","code":"validate_inputs(   exp_design,   count_matrix,   t2g,   import_type,   model_type,   condition_var,   case_value,   fixed_effects,   aggregate_to_gene,   gene_level,   import )"},{"path":"https://l-a-yates.github.io/cpam/reference/validate_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate input parameters for prepare_cpam — validate_inputs","text":"exp_design Experimental design data frame count_matrix Count matrix t2g Transcript gene mapping import_type Import type model_type Model type condition_var Condition variable case_value Case value fixed_effects Fixed effects formula aggregate_to_gene Whether aggregate gene level gene_level Whether data gene level import Whether import data","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/validate_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate input parameters for prepare_cpam — validate_inputs","text":"NULL, throws error validation fails","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/visualise.html","id":null,"dir":"Reference","previous_headings":"","what":"Launches a Shiny app to visualise the data and fitted models of a cpam object — visualise","title":"Launches a Shiny app to visualise the data and fitted models of a cpam object — visualise","text":"Launches Shiny app visualise data fitted models cpam object","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/visualise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launches a Shiny app to visualise the data and fitted models of a cpam object — visualise","text":"","code":"visualise(   cpo,   subset = NULL,   degs_only = TRUE,   deg_threshold = 0.05,   p_type = c(\"p_gam\", \"p_mvn\"),   shape_type = c(\"shape1\", \"shape2\") )"},{"path":"https://l-a-yates.github.io/cpam/reference/visualise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launches a Shiny app to visualise the data and fitted models of a cpam object — visualise","text":"cpo cpam object containing count data, model fits, optional changepoint/shape estimates subset Character vector; names targets genes (cpo$gene_level = TRUE) load Shiny app. NULL, genes/targets included based degs_only. degs_only Logical; TRUE, display differentially expressed genes/targets adjusted p-value deg_threshold. Default TRUE. deg_threshold Numeric; significance threshold differentially expressed genes/targets. used degs_only = TRUE. Default 0.05. p_type character; choose type p-value. Options \"p_gam\" (default) \"p_mvn\" (see compute_p_values() details). shape_type character; \"shape1\" include unconstrained otherwise \"shape2\". Default \"shape1\". instances, transcripts gene may \"null\" shaped, p-value gene may still significant. due different methods determining significance changepoints gene-level p-values. , conservatively, remove null-shaped genes DEG list.","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/visualise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launches a Shiny app to visualise the data and fitted models of a cpam object — visualise","text":"None (launches Shiny app browser)","code":""},{"path":"https://l-a-yates.github.io/cpam/reference/visualise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launches a Shiny app to visualise the data and fitted models of a cpam object — visualise","text":"","code":"if (interactive()){  # A simple gene-level example cpo <- cpo_example  # Launch visualization with all genes visualise(cpo, degs_only = FALSE)  # Launch with only significant genes visualise(cpo, deg_threshold = 0.05)  # Launch with specific genes visualise(cpo, subset = c(\"g001\",\"g002\",\"g003\")) }"},{"path":[]},{"path":"https://l-a-yates.github.io/cpam/news/index.html","id":"cpam-013","dir":"Changelog","previous_headings":"","what":"cpam 0.1.3","title":"cpam 0.1.3","text":"CRAN release: 2025-03-13 First release cpam CRAN. Implements changepoint detection, smooth shape-constrained trends time series omics data. Supports transcript- gene-level analysis, case-case-control studies, uncertainty quantification. Includes interactive ‘shiny’ interface.","code":""}]
